第一步，安装一些必须的命令（每台机器）：
yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp



第二步，进行基础性配置（每台机器）：
修改hostname：
vim /etc/hostname
每台集群都要设置自己的hostname，都是不一样。

配置host
vim /etc/hosts
每台机器都添加一样的ip跟hostname的映射

关闭防火墙：
systemctl stop firewalld
systemctl disable firewalld

禁用SELinux：
vim /etc/selinux/config
设置SELINUX=disabled

禁用交换分区：
vim /etc/fstab
将swap注释掉，如：#/dev/mapper/cl-swap     swap                    swap    defaults        0 0

配置iptables的ACCEPT规则：
iptables -F && iptables -X && iptables -F -t nat && iptables -X -t nat && iptables -P FORWARD ACCEPT

设置网络配置：
cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
然后执行：sysctl --system

第二步都执行完后，重启电脑。



第三步，安装Docker（每台机器）：
安装必要的依赖：
yum install -y yum-utils device-mapper-persistent-data lvm2

设置docker仓库：
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

修改 /etc/docker/daemon.json 内容：
mkdir -p /etc/docker
tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://orptaaqe.mirror.aliyuncs.com"],
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
systemctl daemon-reload

安装docker：
yum install -y --allowerasing docker-ce docker-ce-cli containerd.io
如果安装不了，可能是版本不对，查看docker版本：
yum list docker-ce --showduplicates | sort -r

设置docker自启动：
systemctl enable docker

启动docker：
systemctl start docker

docker配置自启动后启动：
systemctl enable docker && systemctl start docker

查看docker运行状态
systemctl status docker



第四步，安装 kubeadm、kubelet、kubectl（每台机器）：
配置yum源：
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

安装kubeadm、kubelet、kubectl（这三个东西一定要保证版本统一，一定要安装这个安装顺序来完成）：
yum install -y kubectl-1.14.0-0 kubelet-1.14.0-0 kubeadm-1.14.0-0

查看k8s的版本：
kubectl version
kubelet --version
kubeadm version

docker和k8s设置同一个cgroup：
sed -i "s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
如果发现输出directory not exist，也说明是没问题的

kubelet自启动：
systemctl enable kubelet

kubelet启动：
systemctl start kubelet

kubelet配置自启动后启动
systemctl enable kubelet && systemctl start kubelet

查看k8s要拉去的docker镜像：
kubeadm config images list

生成初始化文件：
kubeadm config print init-defaults > kubeadm-init.yaml
将advertiseAddress: 1.2.3.4修改为本机地址
将imageRepository: k8s.gcr.io修改为imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers

下载镜像：
kubeadm config images pull --config kubeadm-init.yaml

查看下载好的镜像：
docker images



第五步，Master执行初始化（只在Master节点）：
执行初始化：
kubeadm init --config kubeadm-init.yaml
等待执行完毕后，最后两行需要保存下来，如下：
kubeadm join 192.168.118.73:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:471a3c37eaf7fbbe14379338de86606999cff436394f9239c1361a19a03cc040

让当前用户可以执行kubectl命令：
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

配置网络：
查看服务的子网掩码：
cat kubeadm-init.yaml | grep serviceSubnet:
下载描述文件：
wget https://docs.projectcalico.org/v3.8/manifests/calico.yaml
打开calico.yaml, 将192.168.0.0/16修改为刚才查看到的子网掩码（10.96.0.0/12）
初始化网络：
kubectl apply -f calico.yaml

查看节点状态：
kubectl get node
节点的状态要等一下才会变成Ready



第五步，添加Worker节点（只在Node节点）：
添加Worker节点：
kubeadm join 192.168.118.73:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:471a3c37eaf7fbbe14379338de86606999cff436394f9239c1361a19a03cc040
添加完成后，可以在主节点查看各个节点的状态



第六步，安装k8s的操作界面：
部署Dashboard：
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml
kubectl apply -f recommended.yaml
部署完毕后，执行kubectl get pods --all-namespaces查看pods状态

创建一个用于登录Dashboard的用户：
cat <<EOF > dashboard-adminuser.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system
EOF
kubectl apply -f dashboard-adminuser.yaml

查看令牌：
kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')

生成证书：
grep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.crt
grep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.key
openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name "kubernetes-client"
第三条命令生成证书时会提示输入密码，可以直接两次回车跳过

kubecfg.p12即需要导入客户端机器的证书，将证书拷贝到客户端机器上，导入即可
scp root@192.168.118.73:/root/.kube/kubecfg.p12 ./
上面的ip为主节点的ip，输入yes回车

登录：
然后使用上面获取到的Token进行登录
